> x <- 1:6  # Create vector.
> y <- x^2  # Create vector by formula.
> print(y)  # Print the vector’s contents.
[1]  1  4  9 16 25 36
> mean(y)  # Arithmetic mean of vector.
[1] 15.16667
> var(y)  # Sample variance of vector.
[1] 178.9667
> model <- lm(y ~ x)  # Linear regression model y = A + B * x.
> print(model)  # Print the model’s results.
x <- 1:6  # Create vector.
y <- x^2  # Create vector by formula
print(y)  #
model <- lm(y ~ x)
print(model)
plot(model)
plot(model)
read.csv("/Downloads/Datasets/BostonHousing.csv")
boston.df=read.csv("/Downloads/Datasets/BostonHousing.csv",header=TRUE)
boston.df=read.csv("/Users/nimishkapoor/Downloads/Datasets/BostonHousing.csv",header=TRUE)
View(boston.df)
dim(boston.df)
head(boston.df)
tail(boston.df)
boston.df[1:10:1]
boston.df[1:10,1]
boston.df[1,1:10]
boston.df[1:10,]
boston.df[5,1:10]
boston.df[5,1,2,8]
boston.df[5,c(1:2,4,8:10)]
boston.df$CRIM
boston.df$CRIM[1:10]
mean(boston.df$MEDV)
summary(boston.df)
names(boston.df)
t(names(boston.df))
t(t(names(boston.df)))
plot(boston.df$MEDV~boston.df$LSTAT,xlab="MEDV",ylab = "LSTAT")
hist(boston.df$MEDV,xlab = "MEDV")
boxplot(boston.df$MEDV~boston.df$CHAS,xlab="CHAS",ylab"MEDV")
boxplot(boston.df$MEDV~boston.df$CHAS,xlab="CHAS",ylab="MEDV")
install.packages("ggplot2")
set.seed(1)
train.rows<-sample(rownames(boston.df),dim(boston.df)[1]*0.6)
train.rows
train.data<-boston.df[train.rows,]
View(train.data)
View(train.data)
train.data
valid.rows<-setdiff(rownames(boston.df),train.rows)
valid.rows
valid.data<-boston.df[valid.rows,]
valid.data
reg<-lm(MEDV~CRIM,data=boston.df,subset=train.rows)
View(reg)
View(reg)
reg
reg$coefficients
tr.res<-data.frame(train.data$MEDV,reg$fitted.values,reg$residuals)
tr.red
tr.res
head(tr.res)
vi.res<-data.frame(valid.data$MEDV,pred,residuals=valid.data$MEDV-pred)
vi.res<-data.frame(valid.data$MEDV,pred,residuals=valid.data$MEDV -pred)
pred<-predict(reg,newdata = valid.data)
vi.res<-data.frame(valid.data$MEDV,pred,residuals=valid.data$MEDV -pred)
vi.res
reg3 <-lm(MEDV~.,data=boston.df,subset = train.rows)
reg3
reg3 <-lm(MEDV~.-CAT.MEDV,data=boston.df,subset = train.rows)
reg3
reg3
?lm
?example(lm)
set.seed(1)
train.rows<-sample(rownames(boston.df),dim(boston.df)[1]*0.6)
train.data<-boston.df[train.rows,]
valid.rows<-setdiff(rownames(boston.df),train.rows)
valid.data<-boston.df[valid.rows,]
reg<-lm(MEDV~CRIM,data=boston.df,subset=train.rows)
tr.res<-data.frame(train.data$MEDV,reg$fitted.values,reg$residuals)
pred<-predict(reg,newdata = valid.data)
vi.res<-data.frame(valid.data$MEDV,pred,residuals=valid.data$MEDV-pred)
reg3 <-lm(MEDV~.-CAT.MEDV,data=boston.df,subset = train.rows)
reg3
reg
View(reg)
reg$residuals
install.packages("forecast")
library(forecast)
accuracy(reg$fitted.values,train.data$MEDV)
install.packages("uroot")
library(ur  oot)
library(ur oot)
library(uroot)
install.packages("forecast")
library(forecast)
install.packages("uroot")
library(forecast)
install.packages("psych")
library(psych)
library("psych")
boston.df2<-boston.df2
boston.df2<-boston.df
row.to.missing<-sample(row.names(boston.df),10)
boston.df2[row.to.missing,]$CRIM<-NA
summary(boston.df2$CRIM)
is.na(boston.df2$CRIM)
sum(is.na)(boston.df$CRIM))
sum(is.na(boston.df$CRIM))
boston.df2[rows.to.missing,]$CRIM<-median(boston.df2$CRIM,na,rm=TRUE)
boston.df2[rows.to.missing,]$CRIM<-median(boston.df2$CRIM,na.rm=TRUE)
boston.df2[row.to.missing,]$CRIM<-median(boston.df2$CRIM,na.rm=TRUE)
plot(boston.df$MEDV~boston.df$LSTAT,xlab="MEDV",ylab="LSTAT")
library(ggplot)
mtcars
install.packages(forecast)
"forecast"
install.packages("forecast")
library(/usr/local/lib/gcc/8/libgcc_s.1.dylib)
library("/usr/local/lib/gcc/8/libgcc_s.1.dylib"")
x
qq
q''
qwqw
library("/usr/local/lib/gcc/8/libgcc_s.1.dylib")
library("libgcc_s.1.dylib")
install.packages("forecast")
savehistory("~/Documents/R commands.Rhistory")
X_train <- sample(1:nrow(X),0.6 * nrow(X))
df1.df<-read.csv('train/user_data.csv')[,c('user_id','submission_count','problem_solved','max_rating','rating','rank')]
df2.df<-read.csv('train/problem_data.csv')[,c('problem_id','level_type')]
df3.df<-read.csv('train/train_submissions.csv')
df4.df<-read.csv('train/test_submissions.csv')
dfu<-df1.df[,]
dfu[, c(6)] <- sapply(dfu[, c(6)], as.numeric)
dfp<-df2.df[,]
dfp[, c(2)] <- sapply(dfp[, c(2)], as.numeric)
dftrain<-df3.df[,]
dftrain<-merge(x = dftrain, y = dfu, by = "user_id", all.x = TRUE)
dftrain<-merge(x = dftrain, y = dfp, by = "problem_id", all.x = TRUE)
dffinal<-df4.df[,]
dffinal<-merge(x = dffinal, y = dfu, by = "user_id", all.x = TRUE)
dffinal<-merge(x = dffinal, y = dfp, by = "problem_id", all.x = TRUE)
train=dftrain
train <- subset(train, select = c('submission_count','problem_solved','max_rating','rating','rank','level_type'))
X=train
y<-subset(dftrain, select = c('attempts_range'))
set.seed=1
X_train <- sample(1:nrow(X),0.6 * nrow(X))
X=train
X=train
df1.df<-read.csv('train/user_data.csv')[,c('user_id','submission_count','problem_solved','max_rating','rating','rank')]
df2.df<-read.csv('train/problem_data.csv')[,c('problem_id','level_type')]
df3.df<-read.csv('train/train_submissions.csv')
df4.df<-read.csv('train/test_submissions.csv')
setwd("~/Documents/scikit_learn")
df1.df<-read.csv('train/user_data.csv')[,c('user_id','submission_count','problem_solved','max_rating','rating','rank')]
df2.df<-read.csv('train/problem_data.csv')[,c('problem_id','level_type')]
df3.df<-read.csv('train/train_submissions.csv')
df4.df<-read.csv('train/test_submissions.csv')
dfu<-df1.df[,]
dfu[, c(6)] <- sapply(dfu[, c(6)], as.numeric)
dfp<-df2.df[,]
dfp[, c(2)] <- sapply(dfp[, c(2)], as.numeric)
dftrain<-df3.df[,]
dftrain<-merge(x = dftrain, y = dfu, by = "user_id", all.x = TRUE)
dftrain<-merge(x = dftrain, y = dfp, by = "problem_id", all.x = TRUE)
dffinal<-df4.df[,]
dffinal<-merge(x = dffinal, y = dfu, by = "user_id", all.x = TRUE)
dffinal<-merge(x = dffinal, y = dfp, by = "problem_id", all.x = TRUE)
train=dftrain
train <- subset(train, select = c('submission_count','problem_solved','max_rating','rating','rank','level_type'))
X=train
y<-subset(dftrain, select = c('attempts_range'))
set.seed=1
ran <- sample(1:nrow(X),0.6 * nrow(X))
X_train<-X[ran,]
x_test<-X[-ran,]
k<-knn(X_train,X_test,cl=y,k=20)
library(class)
k<-knn(X_train,X_test,cl=y,k=20)
X_test<-X[-ran,]
k<-knn(X_train,X_test,cl=y,k=20)
y_train<-as.factor(y[ran,])
k<-knn(X_train,X_test,cl=y,k=20)
train <- subset(train, select = c('submission_count','problem_solved','max_rating','rating','rank','level_type','attempts_range'))
train=dftrain
train <- subset(train, select = c('submission_count','problem_solved','max_rating','rating','rank','level_type','attempts_range'))
X=train
set.seed=1
ran <- sample(1:nrow(X),0.6 * nrow(X))
X_train<-X[ran,]
X_test<-X[-ran,]
y_train<-as.factor(X[ran,7])
k<-knn(X_train,X_test,cl=y_train,k=20)
y_test <- as.factor(dia[-ran,7])
y_test <- as.factor(X[-ran,7])
tb <- table(k,y_test)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tb)
fin=dffinal
fin<-subset(train, select = c('submission_count','problem_solved','max_rating','rating','rank','level_type'))
final=predict(knn,fin)
k<-knn(X_train,fin,cl=y_train,k=20)
X_train<-X[ran,-7]
X_test<-X[-ran,-7]
k<-knn(X_train,fin,cl=y_train,k=20)
y_train<-as.factor(X[ran,7])
X_train<-X[,-7]
k<-knn(X_train,fin,cl=y_train,k=20)
y_train<-as.factor(X[,7])
X_train<-X[,-7]
y_train<-X[,7]
X_train<-X[,-7]
k<-knn(X_train,fin,cl=y_train,k=20)
tb <- table(k,y_test)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tb)
up<-dffinal
dffinal<-merge(x = dffinal, y = up, all.x = TRUE)
head(k)
up<-merge(x = dffinal, y = k, all.x = TRUE)
df1.df<-read.csv('train/user_data.csv')[,c('user_id','submission_count','problem_solved','max_rating','rating','rank')]
df2.df<-read.csv('train/problem_data.csv')[,c('problem_id','level_type')]
df3.df<-read.csv('train/train_submissions.csv')
df4.df<-read.csv('train/test_submissions.csv')
dfu<-df1.df[,]
dfu[, c(6)] <- sapply(dfu[, c(6)], as.numeric)
dfp<-df2.df[,]
dfp[, c(2)] <- sapply(dfp[, c(2)], as.numeric)
dftrain<-df3.df[,]
dftrain<-merge(x = dftrain, y = dfu, by = "user_id", all.x = TRUE)
dftrain<-merge(x = dftrain, y = dfp, by = "problem_id", all.x = TRUE)
dffinal<-df4.df[,]
dffinal<-merge(x = dffinal, y = dfu, by = "user_id", all.x = TRUE)
dffinal<-merge(x = dffinal, y = dfp, by = "problem_id", all.x = TRUE)
train=dftrain
train <- subset(train, select = c('submission_count','problem_solved','max_rating','rating','rank','level_type','attempts_range'))
fin=dffinal
fin<-subset(train, select = c('submission_count','problem_solved','max_rating','rating','rank','level_type'))
X=train
set.seed=1
y_train<-X[,7]
X_train<-X[,-7]
library(class)
k<-knn(X_train,fin,cl=y_train,k=20)
tb <- table(k,y_test)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tb)
head(k)
up<-merge(x = dffinal, y = k, all.x = TRUE)
summary(k)
dimension(k)
dim(k)
